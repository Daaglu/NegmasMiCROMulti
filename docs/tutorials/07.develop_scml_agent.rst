
Develop a factory manager (agent) for the SCM world
---------------------------------------------------

This tutorial describes how to develop an agent for the SCM world, test
it, and submit it to the ANAC 2019 SCM league.

The first step is to install negmas

.. code:: bash

    pip install negmas

Once you have this library installed, you can start developing your
factory manager:

You are told that you cannot instantiate your newly created class as did
not implement the abstract (required) method ``on_negotiation_request``.
That is actually the ONLY abstract method you need to implement.

.. code:: ipython3

    from negmas.apps.scml import FactoryManager
    import yaml
    yaml.warnings({'YAMLLoadWarning': False}) # avoid a dask warning in newest yaml.
    class MyFactoryManager(FactoryManager):
        """My factory manager"""

As the
`documentation <http://www.yasserm.com/negmas/negmas.apps.scml.html?highlight=on_negotiation_request#negmas.apps.scml.SCMLAgent.on_negotiation_request>`__
states, this function is called whenever your factory manager receives a
request from another agent to negotiate. You can either return ``None``
if you do not want to accept this negotiation or create a ``Negotiator``
that represents your agent in it.

Your do-nothing agent is almost ready. Let's try it:

The property ``stats`` in ``World`` gives you several statistics about
the world for every time-step of the simulation.

Let's check the contracts of this world:

Let's try to run a tournament with this do-nothing agent against the
built-in greedy agent:

.. code:: ipython3

    from negmas.apps.scml.utils import anac2019_tournament
    from negmas.apps.scml import GreedyFactoryManager
    
    results = anac2019_tournament(competitors=(MyFactoryManager, GreedyFactoryManager)
                                  , agent_names_reveal_type=True, n_runs_per_config=1
                                  # , n_steps=10  # uncomment this for a faster test
                                 )

You can see the scores that each individual factory manager got (just a
random sample):

.. code:: ipython3

    results.scores.head()




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>agent_name</th>
          <th>agent_type</th>
          <th>log_file</th>
          <th>score</th>
          <th>stats_folder</th>
          <th>world</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>greedy_2_0</td>
          <td>GreedyFactoryManager</td>
          <td>None</td>
          <td>0.0</td>
          <td>/Users/yasser/code/projects/negmas/notebooks/t...</td>
          <td>00003/20190227-080729RjPH</td>
        </tr>
        <tr>
          <th>1</th>
          <td>my_1_1</td>
          <td>MyFactoryManager</td>
          <td>None</td>
          <td>0.0</td>
          <td>/Users/yasser/code/projects/negmas/notebooks/t...</td>
          <td>00003/20190227-080729RjPH</td>
        </tr>
        <tr>
          <th>2</th>
          <td>greedy_1_2</td>
          <td>GreedyFactoryManager</td>
          <td>None</td>
          <td>0.0</td>
          <td>/Users/yasser/code/projects/negmas/notebooks/t...</td>
          <td>00003/20190227-080729RjPH</td>
        </tr>
        <tr>
          <th>3</th>
          <td>my_2_3</td>
          <td>MyFactoryManager</td>
          <td>None</td>
          <td>0.0</td>
          <td>/Users/yasser/code/projects/negmas/notebooks/t...</td>
          <td>00003/20190227-080729RjPH</td>
        </tr>
        <tr>
          <th>4</th>
          <td>greedy_2_4</td>
          <td>GreedyFactoryManager</td>
          <td>None</td>
          <td>0.0</td>
          <td>/Users/yasser/code/projects/negmas/notebooks/t...</td>
          <td>00003/20190227-080729RjPH</td>
        </tr>
      </tbody>
    </table>
    </div>



You can also check the total scores for each factory manager type:

.. code:: ipython3

    results.total_scores




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>agent_type</th>
          <th>score</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>MyFactoryManager</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>1</th>
          <td>GreedyFactoryManager</td>
          <td>0.0</td>
        </tr>
      </tbody>
    </table>
    </div>



If you want, you can check if these differences are statistically
significant using a t-test:

.. code:: ipython3

    results.ttest




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>a</th>
          <th>b</th>
          <th>p</th>
          <th>t</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>GreedyFactoryManager</td>
          <td>MyFactoryManager</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
      </tbody>
    </table>
    </div>



So the greedy factory manager is better than the do-nothing factory
manager getting a total score of 2878 compared with only 0 for the
do-nothing factory manager (as expected). Moreover, this difference is
statistically significant as the p-value is 0.041 < 0.05.

Or, let's just find out who was the winner(s):

.. code:: ipython3

    results.winners




.. parsed-literal::

    ['MyFactoryManager', 'GreedyFactoryManager']



and what was its/their score:

.. code:: ipython3

    print(results.winners_scores)


.. parsed-literal::

    [0. 0.]


Now, you completed the development of your factory manager, tested it by
running it in worlds and tournaments, what exactly should you do to
participate in the SCM league @ ANAC 2019:

You need to submit the following items:

-  Names of all members of the team with their affiliations and email
   addresses
-  Either a single python file with the whole implementation of your
   agent with any supporting code or a zip file with a single folder
   containing your code. In the later case, you will need to indicate
   the class name of your factory manager. Any factory manager names are
   accepted except (Insurance, Bank, MFactoryManager, CFactoryManager).
-  A 2-pages academic report about your factory manager. Please check
   the submission website for details about this report.

That is it folks! You can now start developing your own factory manager.
Have fun.




Download :download:`Notebook<notebooks/07.develop_scml_agent.ipynb>`.


