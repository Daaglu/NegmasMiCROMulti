
Run a session of the SCML world
-------------------------------

The SCML world (Supply Chain Management League) ships as an example
world with ``NegMAS``. It is used as one of the leagues of ANAC 2019.

In this tutorial, you will test a run of this world.

Firstly, let's import everything from the SCML app

.. code:: ipython3

    from negmas.apps.scml import *


There are several ways to create an SCML world. One of the simplest is
to use one of the class methods of the ``SCMLWorld`` class:

.. code:: ipython3

    world = SCMLWorld.single_path_world(n_steps=50, n_consumers=5, n_miners=5, n_factories_per_level=5, n_intermediate_levels=1)

Now you can run this world simulation by just calling ``run``:

.. code:: ipython3

    world.run()

Let's see what happened in this run. Firstly, how many negotiations were
conducted over time

.. code:: ipython3

    plt.plot(world.stats['n_negotiations'])
    None



.. image:: 06.run_scml_files/06.run_scml_7_0.png


It is clear that many negotiations happened at the beginning of the
simulation with smaller number later. That is expected as the consumers
publish their calls for proposals early on.

Several other statistics are available:

.. code:: ipython3

    print(list(world.stats.keys()))


.. parsed-literal::

    ['n_cfps_on_board_before', 'n_registered_negotiations_before', 'n_contracts_executed', 'n_contracts_cancelled', 'n_breaches', 'breach_level', 'n_contracts_signed', 'n_contracts_concluded', 'n_negotiations', 'n_registered_negotiations_after', 'activity_level', 'n_cfps', 'n_cfps_on_board_after', '_balance_bank', '_balance_society', '_balance_insurance', '_storage_insurance', 'balance_m_0', 'storage_m_0', 'balance_m_1', 'storage_m_1', 'balance_m_2', 'storage_m_2', 'balance_m_3', 'storage_m_3', 'balance_m_4', 'storage_m_4', 'balance_c_0', 'storage_c_0', 'balance_c_1', 'storage_c_1', 'balance_c_2', 'storage_c_2', 'balance_c_3', 'storage_c_3', 'balance_c_4', 'storage_c_4', 'balance_fKMaPB3uSBRx', 'storage_fKMaPB3uSBRx', 'balance_uTD4AiQO7tzR', 'storage_uTD4AiQO7tzR', 'balance_UYSQviAykFGA', 'storage_UYSQviAykFGA', 'balance_BYNWLotYUAVR', 'storage_BYNWLotYUAVR', 'balance_Aj1EYfzMy6Rr', 'storage_Aj1EYfzMy6Rr', 'balance_v8seK0ld7gW1', 'storage_v8seK0ld7gW1', 'balance_evwmtfMYvgW9', 'storage_evwmtfMYvgW9', 'balance_C45L9sPKW94b', 'storage_C45L9sPKW94b', 'balance_nddUqFHO5sq2', 'storage_nddUqFHO5sq2', 'balance_dajIUQ7Lxgat', 'storage_dajIUQ7Lxgat', 'market_size', 'production_failures', '_market_size_total']


We can for example check the activity level of this world (defined as
the total amount of money transferred due to trade)

.. code:: ipython3

    plt.plot(world.stats['activity_level'])
    None



.. image:: 06.run_scml_files/06.run_scml_11_0.png


We can see a picture of contracting in this world as follows:

.. code:: ipython3

    plt.plot(world.stats['n_contracts_concluded'], label='Concluded Contracts')
    plt.plot(world.stats['n_contracts_cancelled'], label='Cancelled Contracts') 
    plt.plot(world.stats['n_contracts_signed'], label='Signed Contracts') 
    plt.plot(world.stats['n_contracts_executed'], label='Executed Contracts')
    plt.legend()         
    None



.. image:: 06.run_scml_files/06.run_scml_13_0.png


We can also check the breaches that happened

.. code:: ipython3

    plt.plot(world.stats['n_breaches'])
    None



.. image:: 06.run_scml_files/06.run_scml_15_0.png


That was a good run. No breaches were committed :-)

It is also possible to focus on the behavior of some specific agent.
Let's first find who was the winner (the factory manager that got
maximum wealth). Notice that there can be multiple winners

.. code:: ipython3

    world.winners




.. parsed-literal::

    [v8seK0ld7gW1]



What was the balance of this winner over time:

.. code:: ipython3

    for winner in world.winners:
        plt.plot(world.stats[f'balance_{winner}'], label=f'{winner}\n({winner.__class__.__name__})')
    plt.legend()
    None



.. image:: 06.run_scml_files/06.run_scml_19_0.png


Let's check how did its total storage change over time:

.. code:: ipython3

    for winner in world.winners:
        plt.plot(world.stats[f'storage_{winner}'], label=winner)
    plt.legend()
    None



.. image:: 06.run_scml_files/06.run_scml_21_0.png


We can actually check what happens to ALL competitors:

.. code:: ipython3

    for name, _ in sorted(((_.name, _) for _ in world.factory_managers), key=lambda x: x[0]):    
        plt.plot(world.stats[f'balance_{name}'], label=name)
    plt.legend()
    None



.. image:: 06.run_scml_files/06.run_scml_23_0.png






Download :download:`Notebook<notebooks/06.run_scml.ipynb>`.


