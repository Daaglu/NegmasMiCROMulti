
Running a Negotiation
---------------------

NegMAS has several built-in negotiation ``Mechanism`` s (``Protocol``
s), negotiation agents (``Negotiator`` s), and ``UtilityFunction`` s.
You can use these to run negotiations as follows:

.. code:: ipython3

    import random # for generating random ufuns
    random.seed(0) # for reproducibility
    from pprint import pprint # for printing
    from negmas import SAOMechanism, AspirationNegotiator, MappingUtilityFunction
    
    session = SAOMechanism(outcomes=10, n_steps=100)
    negotiators = [AspirationNegotiator(name=f'a{_}') for _ in range(5)]
    for negotiator in negotiators:
        session.add(negotiator, ufun=MappingUtilityFunction(lambda x: random.random() * x[0]))
    
    pprint(session.run().__dict__)


.. parsed-literal::

    {'agreement': (3,),
     'broken': False,
     'current_offer': (3,),
     'current_proposer': 'a2-1a607b9f-c5b1-4981-a4a7-beb9929b80d2',
     'error_details': '',
     'has_error': False,
     'n_acceptances': 0,
     'n_negotiators': 5,
     'relative_time': 0.7,
     'running': False,
     'started': True,
     'step': 69,
     'time': 0.05947694399998227,
     'timedout': False}


Negotations end with a status that shows you what happens. In the above
example, we can see that the negotiation was not broken and did not
time-out. The agreement was on outcome ``(4,)`` of the *10* possible
outcomes of this negotiation. That offer was offered by negotiator
``a0`` (the rest of the agent *ID* is always a random value to ensure no
name repetitions) which was accepted by all of the other *4*
negotiators.

It is possible to run the same negotiation using a ``Protocol`` object
instead of a ``Mechanism`` object

.. code:: ipython3

    random.seed(0) # for reproducibility
    from negmas import SAOProtocol
    
    session = SAOProtocol(outcomes=10, n_steps=100)
    negotiators = [AspirationNegotiator(name=f'a{_}') for _ in range(5)]
    for negotiator in negotiators:
        session.add(negotiator, ufun=MappingUtilityFunction(lambda x: random.random() * x[0]))
    
    pprint(session.run().__dict__)


.. parsed-literal::

    {'agreement': (3,),
     'broken': False,
     'current_offer': (3,),
     'current_proposer': 'a2-f98abe96-b5f1-4d0f-b598-c77bd74dbf25',
     'error_details': '',
     'has_error': False,
     'n_acceptances': 0,
     'n_negotiators': 5,
     'relative_time': 0.7,
     'running': False,
     'started': True,
     'step': 69,
     'time': 0.05262000499999431,
     'timedout': False}


As you can see, we got the same output.\ ``Protocol`` is an alias of
``Mechanism`` in NegMAS.

Let's try a more meaningful situation: Assume we have a buyer and a
seller who are negotiating about a business transaction in which the
buyer wants to maximize his profit while the seller wants to minimize
her cost. They both would like to transact on as much as possible of the
product and each has some preferred delivery time.

This can be modeled in the following negotiation:

.. code:: ipython3

    from negmas import Issue, SAOMechanism, AspirationNegotiator, normalize
    from negmas.utilities import LinearUtilityAggregationFunction as LUFun
    issues = [Issue(name='price', values=10), Issue(name='quantity', values=10)
              , Issue(name='delivery_time', values=10)]
    session = SAOMechanism(issues=issues, n_steps=20)
    
    buyer_utility = normalize(ufun=LUFun(issue_utilities={'price': lambda x: 9.0 - x
                                           , 'quantity': lambda x: 0.2 * x
                                           , 'delivery_time': lambda x: x})
                             , outcomes=session.outcomes)
    
    seller_utility = normalize(ufun=LUFun(issue_utilities={'price': lambda x: x
                                           , 'quantity': lambda x: 0.2 * x
                                           , 'delivery_time': lambda x: 9.0 - x})
                               , outcomes=session.outcomes)
    
    
    session.add(AspirationNegotiator(name='buyer'), ufun=buyer_utility)
    session.add(AspirationNegotiator(name='seller'), ufun=seller_utility)
    pprint(session.run().__dict__)


.. parsed-literal::

    {'agreement': {'delivery_time': 9, 'price': 0, 'quantity': 5},
     'broken': False,
     'current_offer': {'delivery_time': 9, 'price': 0, 'quantity': 5},
     'current_proposer': 'buyer-5dbe1560-7e5e-4a21-97f0-d82990a7513a',
     'error_details': '',
     'has_error': False,
     'n_acceptances': 0,
     'n_negotiators': 2,
     'relative_time': 0.2,
     'running': False,
     'started': True,
     'step': 3,
     'time': 0.05683828200000107,
     'timedout': False}


In this run, we can see that the agreement was on a high price (*9*)
which is preferred by the seller but with a delivery time of *8* which
is preferred by the buyer. Negotiation took *17* steps out of the
allowed *20* (*90%* of the available time)

We can check the negotiation history as well

.. code:: ipython3

    for i, _ in enumerate(session.history):
        print(f'{i:03}: {_.current_proposer} offered {_.current_offer}')


.. parsed-literal::

    000: seller-abde9ed7-3a92-4250-a3cc-0441be826b67 offered {'price': 9, 'quantity': 5, 'delivery_time': 0}
    001: buyer-5dbe1560-7e5e-4a21-97f0-d82990a7513a offered {'price': 0, 'quantity': 5, 'delivery_time': 9}
    002: buyer-5dbe1560-7e5e-4a21-97f0-d82990a7513a offered {'price': 0, 'quantity': 5, 'delivery_time': 9}


We can even plot the complete negotiation history and visually see how
far were the result from the pareto frontier (it was 0.043 utility units
far from it). We can see that it was possible to increase the utility of
the seller without decreasing the utility of the buyer at the agreement
point (i.e. going vertically up from the agreement). That means that
there is some *money left on the table* yet the results are not very far
from the pareto front.

.. code:: ipython3

    session.plot(plot_outcomes=False)



.. image:: 01.running_simple_negotiation_files/01.running_simple_negotiation_10_0.png


What happens if the seller was much more interested in delivery time.

Firstly, what do you expect?

Given that delivery time becomes a more important issue now, the buyer
will get more utility points by allowing the price to go up given that
the delivery time can be made earlier. This means that we should expect
the delivery time to go down in the agreement and the price to go up if
it can. Let's see what happens:

.. code:: ipython3

    session = SAOMechanism(issues=issues, n_steps=50)
    
    buyer_utility = normalize(ufun=LUFun(issue_utilities={'price': lambda x: x
                                           , 'quantity': lambda x: 0.2 * x
                                           , 'delivery_time': lambda x: 9.0 - x}
                                         , weights = {'price': 1.0, 'quantity': 1.0, 'delivery_time': 10.0})
                             , outcomes=session.outcomes)
    
    session.add(AspirationNegotiator(name='buyer'), ufun=buyer_utility)
    session.add(AspirationNegotiator(name='seller'), ufun=seller_utility)
    pprint(session.run().__dict__)


.. parsed-literal::

    {'agreement': {'delivery_time': 0, 'price': 9, 'quantity': 5},
     'broken': False,
     'current_offer': {'delivery_time': 0, 'price': 9, 'quantity': 5},
     'current_proposer': 'seller-84812b00-6e2f-4c7b-9bab-c5a931503049',
     'error_details': '',
     'has_error': False,
     'n_acceptances': 0,
     'n_negotiators': 2,
     'relative_time': 0.06,
     'running': False,
     'started': True,
     'step': 2,
     'time': 0.08597508000002563,
     'timedout': False}


We can check it visually as well:

.. code:: ipython3

    session.plot(plot_outcomes=False)



.. image:: 01.running_simple_negotiation_files/01.running_simple_negotiation_14_0.png


It is clear that the new ufuns transformed the problem. Now we have a
single outcome at the pareto front. The agreement again is near to it
(*0.041* utility points) and as expected the agreement was to make the
delivery time *0* which is much earlier than before. Moreover, the
negotation eas much faster finighing in 3 steps (8% of the available
time).

What happens if we repeat the earlier neotiation but with a much longer
negotiation time:

.. code:: ipython3

    session = SAOMechanism(issues=issues, n_steps=2000)
    
    buyer_utility = normalize(ufun=LUFun(issue_utilities={'price': lambda x: 9.0 - x
                                           , 'quantity': lambda x: 0.2 * x
                                           , 'delivery_time': lambda x: x})
                             , outcomes=session.outcomes)
    
    seller_utility = normalize(ufun=LUFun(issue_utilities={'price': lambda x: x
                                           , 'quantity': lambda x: 0.2 * x
                                           , 'delivery_time': lambda x: 9.0 - x})
                               , outcomes=session.outcomes)
    
    
    session.add(AspirationNegotiator(name='buyer'), ufun=buyer_utility)
    session.add(AspirationNegotiator(name='seller'), ufun=seller_utility)
    
    pprint(session.run().__dict__)
    session.plot(plot_outcomes=False)


.. parsed-literal::

    {'agreement': {'delivery_time': 0, 'price': 9, 'quantity': 5},
     'broken': False,
     'current_offer': {'delivery_time': 0, 'price': 9, 'quantity': 5},
     'current_proposer': 'seller-b46cc379-da45-4dc0-a33a-4b3d1e49ed60',
     'error_details': '',
     'has_error': False,
     'n_acceptances': 0,
     'n_negotiators': 2,
     'relative_time': 0.002,
     'running': False,
     'started': True,
     'step': 3,
     'time': 0.07386390099998152,
     'timedout': False}



.. image:: 01.running_simple_negotiation_files/01.running_simple_negotiation_16_1.png


Given the longer negotiation time, the buyer and the seller can both
take a tougher stance conceding as slowly as possible and as a result
the actually acheive a point exatly on the pareto-front. Moreover, this
point happens to maximze the *welfare* defined as the sum of the utility
received by both partners.





Download :download:`Notebook<notebooks/01.running_simple_negotiation.ipynb>`.


